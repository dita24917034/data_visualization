# -*- coding: utf-8 -*-
"""app.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ny0D_QkxJgivCUwN4ZVlfxY9ghdsEQca
"""

# Commented out IPython magic to ensure Python compatibility.
# %%writefile app.py
import streamlit as st
import pandas as pd
import matplotlib.pyplot as plt
# 
# # Load data
df = pd.read_csv("data academic.csv")
# 
prog_code_mapping = {
    'BCH': 'Biochemistry',
    'BLD': 'Building technology',
    'CEN': 'Computer Engineering',
    'CHE': 'Chemical Engineering',
    'CHM': 'Industrial Chemistry',
    'CIS': 'Computer Science',
    'CVE': 'Civil Engineering',
    'EEE': 'Electrical and Electronics Engineering',
    'ICE': 'Information and Communication Engineering',
    'MAT': 'Mathematics',
    'MCB': 'Microbiology',
    'MCE': 'Mechanical Engineering',
    'MIS': 'Management and Information System',
    'PET': 'Petroleum Engineering',
    'PHYE': 'Industrial Physics-Electronics and IT Applications',
    'PHYG': 'Industrial Physics-Applied Geophysics',
    'PHYR' : 'Industrial Physics-Renewable Energy'
}

df['Prog Short'] = df['Prog Code'].map(prog_code_mapping)
# -------------------------------
# Sidebar Filters
# -------------------------------
st.sidebar.header("üîç Filter Data")

# Filter Program Studi - dengan opsi "Semua"
prog_codes = sorted(df['Prog Code'].dropna().unique())
prog_options = ["Semua Program"] + prog_codes
selected_prog = st.sidebar.selectbox("Pilih Program Studi (Prog Code):", prog_options)

# Filter Tahun Masuk - dropdown tunggal dengan opsi "Semua Tahun"
available_yog = sorted(df['YoG'].dropna().unique())
yog_options = ["Semua Tahun"] + [str(y) for y in available_yog]
selected_yog = st.sidebar.selectbox("Pilih Tahun Masuk (YoG):", yog_options)

# -------------------------------
# Filter Data Berdasarkan Pilihan
# -------------------------------
filtered_df = df.copy()

# Terapkan filter Prog Code
if selected_prog != "Semua Program":
    filtered_df = filtered_df[filtered_df['Prog Code'] == selected_prog]

# Terapkan filter Tahun Masuk
if selected_yog != "Semua Tahun":
    filtered_df = filtered_df[filtered_df['YoG'] == int(selected_yog)]

# -------------------------------
# Main Dashboard
# -------------------------------
st.title("Universitas ABC Academic Dashboard")

# --- Kartu Statistik: Total Mahasiswa, Rata-rata CGPA, Tahun Masuk (YoG) ---
col1, col2, col3 = st.columns(3)

# Card 1: Total Mahasiswa
with col1:
    if 'ID No' in filtered_df.columns:
        total_students = filtered_df['ID No'].nunique()
        st.markdown(f"""
            <div style='padding: 20px; background-color: #f0f2f6; border-radius: 10px;
                        text-align: center; box-shadow: 2px 2px 8px rgba(0,0,0,0.05);'>
                <h4 style='color: #333;'>Total Mahasiswa</h4>
                <h2 style='color: #007acc;'>{total_students}</h2>
            </div>
        """, unsafe_allow_html=True)
    else:
        st.warning("Kolom 'ID No.' tidak ditemukan dalam data.")

# Card 2: Rata-rata CGPA
with col2:
    if 'CGPA' in filtered_df.columns:
        avg_cgpa = round(filtered_df['CGPA'].mean(), 2)
        st.markdown(f"""
            <div style='padding: 20px; background-color: #f0f2f6; border-radius: 10px;
                        text-align: center; box-shadow: 2px 2px 8px rgba(0,0,0,0.05);'>
                <h4 style='color: #333;'>Rata-rata CGPA</h4>
                <h2 style='color: #28a745;'>{avg_cgpa}</h2>
            </div>
        """, unsafe_allow_html=True)
    else:
        st.warning("Kolom 'CGPA' tidak ditemukan dalam data.")

# Card 3: Tahun Masuk (YoG)
with col3:
    year_display = selected_yog if selected_yog != "Semua Tahun" else "Semua Tahun"
    st.markdown(f"""
        <div style='padding: 20px; background-color: #f0f2f6; border-radius: 10px;
                    text-align: center; box-shadow: 2px 2px 8px rgba(0,0,0,0.05);'>
            <h4 style='color: #333;'>Tahun Masuk (YoG)</h4>
            <h2 style='color: #d9534f;'>{year_display}</h2>
        </div>
    """, unsafe_allow_html=True)

# --- Bar Chart: Rata-rata CGPA per Tahun
st.subheader("üìä Rata-rata GPA Mahasiswa per Tahun")

if 'YoG' in filtered_df.columns and 'CGPA' in filtered_df.columns:
    if not filtered_df.empty:
        avg_gpa = filtered_df.groupby('YoG')['CGPA'].mean()
        fig_bar, ax_bar = plt.subplots(figsize=(4, 2.5))
        avg_gpa.plot(kind='bar', color='skyblue', ax=ax_bar)
        ax_bar.set_ylabel("Rata-rata GPA")
        ax_bar.set_xlabel("Tahun Masuk")
        ax_bar.set_title("Rata-rata GPA Mahasiswa", fontsize=10)
        st.pyplot(fig_bar)
    else:
        st.info("Tidak ada data untuk kombinasi filter.")
else:
    st.warning("Kolom 'YoG' atau 'CGPA' tidak ditemukan dalam data.")

# --- Pie Chart: Distribusi Gender
st.subheader("üßë‚Äçüéì Distribusi Gender Mahasiswa")

if 'Gender' in filtered_df.columns:
    gender_counts = filtered_df['Gender'].value_counts()
    if not gender_counts.empty:
        fig_pie, ax_pie = plt.subplots(figsize=(2, 2))
        ax_pie.pie(gender_counts, labels=gender_counts.index, autopct='%1.1f%%',
                   startangle=90, colors=['lightcoral', 'lightskyblue'], textprops={'fontsize': 9})
        ax_pie.axis('equal')
        st.pyplot(fig_pie)
    else:
        st.info("Tidak ada data gender pada filter ini.")
else:
    st.warning("Kolom 'Gender' tidak ditemukan dalam data.")
# --- Box Plot CGPA100‚ÄìCGPA400 per Tahun Masuk ---
st.subheader("üì¶ Distribusi Nilai GPA Thn 1 - 4 per Tahun Masuk")

# Pastikan kolom tersedia
cgpa_columns = ['CGPA100', 'CGPA200', 'CGPA300', 'CGPA400']
available_cols = [col for col in cgpa_columns if col in filtered_df.columns]

if available_cols and 'YoG' in filtered_df.columns:
    if not filtered_df.empty:
        # Persiapkan data untuk boxplot: melt jadi long-form
        boxplot_data = pd.melt(
            filtered_df,
            id_vars=['YoG'],
            value_vars=available_cols,
            var_name='Level',
            value_name='Nilai GPA'
        )

        # Plot dengan Matplotlib
        import seaborn as sns
        fig_box, ax_box = plt.subplots(figsize=(7, 4))
        sns.boxplot(data=boxplot_data, x='YoG', y='Nilai GPA', hue='Level', ax=ax_box)
        ax_box.set_title("Distribusi Nilai GPA Thn 1 - 4 per Tahun Masuk")
        ax_box.legend(title='Tingkat')
        st.pyplot(fig_box)
    else:
        st.info("Tidak ada data untuk ditampilkan dalam box plot.")
else:
    st.warning("Kolom 'YoG' atau CGPA100‚Äì400 tidak tersedia dalam data.")
